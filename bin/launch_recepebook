#!/usr/bin/env python

import sys
import os
import logging
import cherrypy
from configobj import ConfigObj

from jinja2 import Environment, FileSystemLoader
from babel.support import Translations

from recepebook.server.app.recepebookApp import RecepeBook
from recepebook.server.controller.homeController import HomeController
from recepebook.server.controller.importController import ImportController



from pdb import set_trace as dbg 


def abort_launch(msg):
  cherrypy.log(msg)
  sys.exit(1)


def build_template_loader(template_path):
    locale_dir = "i18n"
    desired_locales = ["fr", "en"]
    loader = FileSystemLoader("templates")
    extensions = ['jinja2.ext.i18n', 'jinja2.ext.autoescape', 'jinja2.ext.with_']

    template_translations = Translations.load(locale_dir, desired_locales)
    template_env = Environment(loader=FileSystemLoader(searchpath=app_template_dir), extensions=extensions)
    template_env.install_gettext_translations(template_translations)
    return template_env


# Read config file name from command parameters
if len(sys.argv) != 2:
  error_msg = "Missing or too many arguments. "
  error_msg += "Usage : python {0} <configs_file>".format(sys.argv[0])
  abort_launch(error_msg)
else:
  configs_file = sys.argv[1]

# Configuration objects to fetch information from
configs = ConfigObj(configs_file)

# General configurations
prj_name = configs['DEFAULT']['project_name']
prj_log_file = configs['LOGGERS']['log_file']

# Application configurations
app_db_url = configs['APP']['db']
app_template_dir = configs['APP']['templates']

# Controller configurations
conf_file_server = configs['ENGINE']['server']
conf_file_controllerHome = configs['ENGINE']['homeController']
conf_file_controllerImport = configs['ENGINE']['importController']

# Setup Log
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(module)s - %(message)s')
handler = logging.FileHandler(prj_log_file)
handler.setFormatter(formatter)
logger = logging.getLogger('recepebook')
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)

# Set server config with config file
cherrypy.config.update(conf_file_server)

# Instanciate App
app = RecepeBook(prj_name, app_db_url, logger)

# Bind for server event (start/stop)
cherrypy.engine.subscribe('start', app.start)
cherrypy.engine.subscribe('stop', app.stop)


# Create html template loader
template_loader = build_template_loader(app_template_dir)

# Create web controllers
home_ctrl = HomeController(app, template_loader, logger)
import_ctrl = ImportController(app, template_loader, logger)

# Map URI path to controllers
#cherrypy.tree.mount(home_ctrl, "/", conf_file_controllerHome)
#cherrypy.tree.mount(import_ctrl, "/import", conf_file_controllerImport)
cherrypy.tree.mount(import_ctrl, "/", conf_file_controllerImport)

# Start server
cherrypy.engine.start()
cherrypy.engine.block()
